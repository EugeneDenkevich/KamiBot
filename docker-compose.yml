version: '3.9'
services:

  kami-db:
    container_name: kami-db
    image: postgres:13.2-alpine
    networks:
      - kami-network
    restart: always
    ports:
      - '${KAMI_BOT_DB_PORT}:${KAMI_BOT_DB_PORT}'
    environment:
      POSTGRES_USER: ${KAMI_BOT_DB_USER}
      POSTGRES_PASSWORD: ${KAMI_BOT_DB_PASS}
      POSTGRES_DB: ${KAMI_BOT_DB_NAME}
      PGPORT: ${KAMI_BOT_DB_PORT}
    volumes:
      - kami_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KAMI_BOT_DB_USER} -d ${KAMI_BOT_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  kami-bot-client:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.client
    networks:
      - kami-network
    restart: always
    env_file:
      - ".env"
    volumes:
      - .:/project
    init: true
    depends_on:
      kami-migrator:
        condition: service_completed_successfully
    environment:
      KAMI_BOT_DB_HOST: "kami-db"
      DEBUG_MODE: true
      KAMI_BOT_CLIENT_LANGUAGE: ${KAMI_BOT_CLIENT_LANGUAGE}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    stdin_open: true
    tty: true

  kami-bot-admin:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.admin
    networks:
      - kami-network
    restart: always
    env_file:
      - ".env"
    volumes:
      - .:/project
    init: true
    depends_on:
      kami-migrator:
        condition: service_completed_successfully
    environment:
      KAMI_BOT_DB_HOST: "kami-db"
      DEBUG_MODE: true
      KAMI_BOT_ADMIN_LANGUAGE: ${KAMI_BOT_ADMIN_LANGUAGE}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    stdin_open: true
    tty: true

  kami-migrator:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.migrator
    networks:
      - kami-network
    env_file:
      - ".env"
    environment:
      KAMI_BOT_DB_HOST: "kami-db"
      DEBUG_MODE: true
    volumes:
      - .:/project
    init: true
    restart: no
    depends_on:
      kami-db:
        condition: service_healthy

networks:
  kami-network:
    name: kami-network
    driver: bridge

volumes:
  kami_db_data:
